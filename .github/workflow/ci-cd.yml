demodbpassword


name: Push-to-EC2

# Trigger deployment only on push to main branch
on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to EC2 on master branch push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the files
        uses: actions/checkout@v2

      - name: Deploy to Server 1
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.HOST_DNS }}
          REMOTE_USER: ${{ secrets.USERNAME }}
          TARGET: ${{ secrets.TARGET_DIR }}

      - name: Executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo apt-get -y update
            sudo apt-get install -y apache2
            sudo systemctl start apache2
            sudo systemctl enable apache2
            cd home
            sudo mv * /var/www/html





name: CI/CD for Spring Boot with Maven

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Build with Maven
      run: mvn clean package

    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: packaged-application
        path: target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: packaged-application
        path: target/

    - name: Setup key
      id: setup-key
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        echo "$DEPLOY_KEY" >> $HOME/key.pem
        chmod 400 $HOME/key.pem

    - name: Copy JAR to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ubuntu
        key: ${{ secrets.DEPLOY_KEY }}
        source: "target/*.jar"
        target: "/home/ubuntu/deployment/"

    - name: Connect SSH and Restart Services
      run: |
        ssh -o StrictHostKeyChecking=no -i $HOME/key.pem  ec2-user@ec2-44-202-29-206.compute-1.amazonaws.com '
          sudo systemctl restart helloworld &&
          sudo systemctl restart nginx



name: Build and Deploy Spring Boot to EC2

on:
  push:
    branches:
      -   # Trigger on changes to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Use the required Java version for your project
          distribution: 'oracle-jdk'

      # Step 3: Build the application with Maven
      - name: Build with Maven
        run: mvn clean package

      # Step 4: Set up SSH
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # Step 5: Deploy to EC2
      - name: Deploy to EC2
        run: |
          scp -o StrictHostKeyChecking=no target/*.jar ${{ secrets.USERNAME }}@${{ secrets.HOST_DNS }}:/home/ec2-user/demo-program-0.0.1-SNAPSHOT.jar
          ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST_DNS }} << 'EOF'
            pkill -f 'java -jar' || true  # Stop the running app if exists
            nohup java -jar /home/ec2-user/demo-program-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
          EOF









